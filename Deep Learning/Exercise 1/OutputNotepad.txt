1.	Using Tensors Calculate the following:
I.	Matrix Multiplication
II.	Inverse of a matrix	


#code

import torch

a=[[2,1,4],[2,1,2],[3,4,3]]
a=torch.tensor(a,dtype=torch.int)
a

'''output
tensor([[2, 1, 4],
        [2, 1, 2],
        [3, 4, 3]], dtype=torch.int32) '''

b=[[1,2,3],[4,5,6],[7,8,9]]
b=torch.tensor(b,dtype=torch.int)
b

'''output
tensor([[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]], dtype=torch.int32)'''

r=[[0,0,0],[0,0,0],[0,0,0]]
r=torch.tensor(r,dtype=torch.int)
r

'''output
tensor([[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]], dtype=torch.int32) '''

for i in range(len(a)):
    for j in range (len(b[0])):
        for k in range (len(b)):
            r[i][j]+= a[i][k]*b[k][j]
r

'''output
tensor([[34, 41, 48],
        [20, 25, 30],
        [40, 50, 60]], dtype=torch.int32)'''


#INVERSE OF MATRIX

import numpy as np
A=[[2,1,2],[1,1,1],[2,3,4]]
A=torch.tensor(A,dtype=torch.int)
f,h=A.shape
print(f)

I = np.identity(n=f)
I=torch.tensor(I,dtype=torch.int)
I
M = np.concatenate((A,I),axis=1)
M=torch.tensor(M,dtype=torch.int)
M
'''output
tensor([[2, 1, 2, 1, 0, 0],
        [1, 1, 1, 0, 1, 0],
        [2, 3, 4, 0, 0, 1]], dtype=torch.int32)'''

I = np.identity(n=f)
I=torch.tensor(I,dtype=torch.int)
I
'''output
tensor([[1, 0, 0],
        [0, 1, 0],
        [0, 0, 1]], dtype=torch.int32)'''

M = np.concatenate((A,I),axis=1)
M=torch.tensor(M,dtype=torch.int)
M
'''output
tensor([[2, 1, 2, 1, 0, 0],
        [1, 1, 1, 0, 1, 0],
        [2, 3, 4, 0, 0, 1]], dtype=torch.int32)'''

for i in range (0,f):
    pivot = M[i][i]
    row =M[i]
    M[i] = row / pivot
    for j in [k for k in range(0,f) if k!=i]:
        M[j] = M[j]-M[i]*M[j][i]
    inverse = M[:,f:]
print(inverse)

'''output

tensor([[ 0.5, 1, -0.5],
        [ -1,  2,  0],
        [ 0.5,-2,  0.5]], dtype=torch.int32)'''


=========================

2.	Demonstrate the Autograd functionality with examples.


import torch
from torch.autograd import Variable
x=torch.tensor(2.0,requires_grad=True)
y=9*x**4+2*x**3+3*x**2+6*x+1
y.backward()
print(y)
print(x.grad)
'''output
tensor(185., grad_fn=<AddBackward0>)
tensor(330.)'''

a=torch.tensor(5.0,requires_grad=True)
b=torch.tensor(3.0,requires_grad=True)
y=(b**3)/2*a+3
print(y.requires_grad)
y.backward()
print(a.grad.data)

'''output
True
tensor(13.5000)'''

z=(a**4)*(2*b+b)
print(z.requires_grad)
z.backward()
print(b.grad.data)

'''output
True
tensor(1942.5000)'''
=========================
